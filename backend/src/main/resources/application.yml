spring:
  config:
    import: optional:application-sentry.yml
  profiles:
    active: dev
  
  application:
    name: Asset Management System
    version: 1.0.0
  
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB
      file-size-threshold: 2KB

  jpa:
    hibernate:
      ddl-auto: validate  # Changed from 'update' to 'validate' for production-ready schema management
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        jdbc:
          time_zone: UTC

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

  h2:
    console:
      enabled: true
      path: /h2-console

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: "${GOOGLE_CLIENT_ID:your-google-client-id-here}"
            client-secret: "${GOOGLE_CLIENT_SECRET:your-google-client-secret-here}"
            scope:
              - email
              - profile
            redirect-uri: "{baseUrl}/api/v1/auth/oauth2/callback/google"
            authorization-grant-type: authorization_code
          microsoft:
            client-id: ${MICROSOFT_CLIENT_ID:placeholder-microsoft-client-id}
            client-secret: ${MICROSOFT_CLIENT_SECRET:placeholder-microsoft-secret}
            scope:
              - openid
              - profile
              - email
              - User.Read
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/api/v1/auth/oauth2/callback/microsoft"
            client-name: Microsoft
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          microsoft:
            authorization-uri: https://login.microsoftonline.com/${MICROSOFT_TENANT_ID:common}/oauth2/v2.0/authorize
            token-uri: https://login.microsoftonline.com/${MICROSOFT_TENANT_ID:common}/oauth2/v2.0/token
            user-info-uri: https://graph.microsoft.com/v1.0/me
            user-name-attribute: id

server:
  port: 8080
  servlet:
    context-path: /api/v1
  
  # Request size limits
  max-http-header-size: 8KB

# Stripe Configuration
stripe:
  api-key: ${STRIPE_SECRET_KEY:sk_test_51SE1M7RnSgrmRk1TxkwctZ6e5Xpun0pkOA8TdvUeKiqT1aTNwKwbwQWQMq6o11nzo8xTS8FhODhSLCJnkUXWXt6J00L2AjI7bm}
  publishable-key: ${STRIPE_PUBLISHABLE_KEY:pk_test_51SE1M7RnSgrmRk1TXlB3HyFWd0jPCj0ffgk4nLZlKhguHybdx7QblMdxZ4ve8Qn1gNt7eiMfbDn6eOK3zrKgnNJC00BXa2ya6q}
  webhook-secret: ${STRIPE_WEBHOOK_SECRET:whsec_your_webhook_secret_here}
  price-ids:
    free: ${STRIPE_FREE_PRICE_ID:price_free}
    professional-monthly: ${STRIPE_PRO_MONTHLY_PRICE_ID:price_pro_monthly}
    professional-annual: ${STRIPE_PRO_ANNUAL_PRICE_ID:price_pro_annual}
    enterprise-monthly: ${STRIPE_ENTERPRISE_MONTHLY_PRICE_ID:price_enterprise_monthly}
    enterprise-annual: ${STRIPE_ENTERPRISE_ANNUAL_PRICE_ID:price_enterprise_annual}
    metered-assets: ${STRIPE_METERED_ASSETS_PRICE_ID:price_metered_assets}
  plans:
    free:
      asset-limit: 50
      user-limit: 3
    professional:
      asset-limit: 500
      user-limit: 25
    enterprise:
      asset-limit: -1  # Unlimited
      user-limit: -1    # Unlimited

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: it-asset-management
      environment: ${SPRING_PROFILES_ACTIVE:dev}
  prometheus:
    metrics:
      export:
        enabled: true

logging:
  level:
    com.chaseelkins.assetmanagement: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.springframework.web.cors: DEBUG

# JWT Configuration
jwt:
  # In production supply via environment: export JWT_SECRET=... (length >= 32 chars)
  secret: "${JWT_SECRET:mySecretKey123456789012345678901234567890}"
  # Legacy property (will be superseded by access-expiration if present)
  expiration: 86400000 # 24 hours in milliseconds (fallback)
  # New granular expirations
  access-expiration: 900000      # 15 minutes
  refresh-expiration: 604800000  # 7 days

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
  info:
    title: Asset Management System API
    description: RESTful API for managing assets, users, and maintenance records
    version: 1.0.0
    contact:
      name: Chase Elkins
      email: chase@example.com

# Custom Application Properties
app:
  name: Asset Management System
  description: Full-stack application for asset tracking
  version: 1.0.0
  url: "${APP_URL:http://localhost:3001}"  # Frontend URL for email links
  contact:
    name: Chase Elkins
    email: chase@example.com
  
  # CORS Configuration - Override in production with environment variable
  cors:
    allowed-origins: "http://localhost:3000,http://127.0.0.1:3000,http://localhost:5173,http://127.0.0.1:5173,http://localhost:3005,http://127.0.0.1:3005,http://localhost:3006,http://127.0.0.1:3006"
  
  # Request Size Limits
  upload:
    max-file-size: 10485760  # 10 MB in bytes
  request:
    max-body-size: 10485760  # 10 MB in bytes
    max-header-size: 8192     # 8 KB in bytes

# Slack Integration (Admin Dashboard Feature - Not Visible on Marketing Pages)
slack:
  webhook:
    url: "${SLACK_WEBHOOK_URL:}"  # Set via environment variable
  notifications:
    enabled: "${SLACK_NOTIFICATIONS_ENABLED:false}"  # Set to true when webhook is configured

# Microsoft Teams Integration (Admin Dashboard Feature)
teams:
  webhook:
    url: "${TEAMS_WEBHOOK_URL:}"  # Set via environment variable
  notifications:
    enabled: "${TEAMS_NOTIFICATIONS_ENABLED:false}"  # Set to true when webhook is configured

# Email Notifications
email:
  notifications:
    enabled: "${EMAIL_NOTIFICATIONS_ENABLED:false}"  # Set to true when SMTP is configured
  from: "${EMAIL_FROM:noreply@krubles.com}"

spring.mail:
  host: "${SMTP_HOST:localhost}"
  port: "${SMTP_PORT:587}"
  username: "${SMTP_USERNAME:}"
  password: "${SMTP_PASSWORD:}"
  properties:
    mail:
      smtp:
        auth: true
        starttls:
          enable: true
          required: true
        connectiontimeout: 5000
        timeout: 5000
        writetimeout: 5000

# Scheduled Task Configuration
scheduling:
  maintenance-check:
    cron: "0 0 8 * * *"  # Run daily at 8:00 AM
  warranty-check:
    cron: "0 30 8 * * *"  # Run daily at 8:30 AM
  rate-limit-cleanup:
    cron: "0 0 * * * *"  # Run every hour
