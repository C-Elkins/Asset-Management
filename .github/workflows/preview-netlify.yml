name: Frontend PR Preview (Netlify)

on:
  pull_request:
    branches: [ main ]

jobs:
  preview:
    name: Build and deploy preview
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install deps
        run: npm ci --no-audit --no-fund

      - name: Build
        run: npm run build

      - name: Deploy preview to Netlify
        id: deploy
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN || '' }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID || '' }}
        run: |
          if [ -z "${NETLIFY_AUTH_TOKEN}" ] || [ -z "${NETLIFY_SITE_ID}" ]; then
            echo "Netlify secrets not configured; skipping deploy."
            echo "url=" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # Use Netlify CLI via npx without persisting as a dependency
          OUTPUT=$(npx --yes netlify-cli@17 deploy \
            --auth "$NETLIFY_AUTH_TOKEN" \
            --site "$NETLIFY_SITE_ID" \
            --dir "dist" \
            --message "PR #${{ github.event.number }} by ${{ github.actor }}" \
            --json)
          echo "$OUTPUT" > deploy.json
          # Extract deploy URL using node; fall back to empty string on parse error
          URL=$(node -e "try{const o=require('fs').readFileSync('deploy.json','utf8');const j=JSON.parse(o);console.log(j.deploy_url||j.ssl_url||j.url||'')}catch(e){console.log('')} ")
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Comment preview URL on PR
        if: ${{ steps.deploy.outputs.url != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const url = process.env.URL;
            if (!url) { core.setFailed('No URL to comment'); return; }
            const body = `ðŸš€ Netlify preview ready: ${url}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
          result-encoding: string
        env:
          URL: ${{ steps.deploy.outputs.url }}
