version: "3.9"

services:
  reverse-proxy:
    image: traefik:v3.1
    container_name: iam-traefik
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    labels:
      - traefik.enable=true
      # Optionally secure the dashboard with basic auth in production or disable it
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_HOST:?set in .env}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls.certresolver=le
      - traefik.http.middlewares.secHeaders.headers.stsSeconds=63072000
      - traefik.http.middlewares.secHeaders.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.secHeaders.headers.stsPreload=true
      - traefik.http.middlewares.secHeaders.headers.customResponseHeaders.X-Frame-Options=DENY
      - traefik.http.middlewares.secHeaders.headers.customResponseHeaders.X-Content-Type-Options=nosniff
      - traefik.http.middlewares.secHeaders.headers.customResponseHeaders.Referrer-Policy=strict-origin-when-cross-origin

  db:
    image: postgres:15
    container_name: iam-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: iam-backend:prod
    container_name: iam-backend-prod
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENVIRONMENT: production
    depends_on:
      db:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`${BACKEND_HOST}`) && PathPrefix(`/api`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls.certresolver=le
      - traefik.http.middlewares.ratelimit.ratelimit.average=50
      - traefik.http.middlewares.ratelimit.ratelimit.burst=100
      - traefik.http.middlewares.secHeaders.headers.browserXssFilter=true
      - traefik.http.middlewares.secHeaders.headers.contentTypeNosniff=true
      - traefik.http.routers.backend.middlewares=ratelimit,secHeaders

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: iam-frontend:prod
    container_name: iam-frontend-prod
    environment:
      BACKEND_ORIGIN: https://${BACKEND_HOST}
    depends_on:
      backend:
        condition: service_started
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${FRONTEND_HOST}`)
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.tls.certresolver=le
      - traefik.http.middlewares.frontendHeaders.headers.stsSeconds=63072000
      - traefik.http.middlewares.frontendHeaders.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.frontendHeaders.headers.stsPreload=true
      - traefik.http.middlewares.frontendHeaders.headers.customResponseHeaders.X-Frame-Options=DENY
      - traefik.http.middlewares.frontendHeaders.headers.customResponseHeaders.X-Content-Type-Options=nosniff
      - traefik.http.middlewares.frontendHeaders.headers.customResponseHeaders.Referrer-Policy=strict-origin-when-cross-origin
      - traefik.http.routers.frontend.middlewares=frontendHeaders

volumes:
  db_data_prod:
  traefik_letsencrypt:
